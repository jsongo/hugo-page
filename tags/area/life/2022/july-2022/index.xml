<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Area/Life/2022/July-2022 on Ethan 的思考札记</title><link>https://www.jsongo.top/tags/area/life/2022/july-2022/</link><description>Recent content in Area/Life/2022/July-2022 on Ethan 的思考札记</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://www.jsongo.top/tags/area/life/2022/july-2022/index.xml" rel="self" type="application/rss+xml"/><item><title>azure serverless 使用</title><link>https://www.jsongo.top/articles/azure-serverless/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.jsongo.top/articles/azure-serverless/</guid><description>&lt;img src="https://cdn.jsongo.top/banners/9f2713cc4890d8cf0449df9f4877fa26.jpg" alt="Featured image of post azure serverless 使用" />&lt;h1 id="基础工具">基础工具
&lt;/h1>&lt;p>Mac 上直接装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew tap azure/functions
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install azure-cli
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>brew install azure-functions-core-tools@4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>具体可以参考这里：&lt;a class="link" href="https://learn.microsoft.com/en-us/azure/azure-functions/functions-run-local?tabs=macos,isolated-process,node-v4,python-v2,http-trigger,container-apps&amp;amp;pivots=programming-language-csharp" target="_blank" rel="noopener"
>Develop Azure Functions locally using Core Tools | Microsoft Learn&lt;/a>&lt;/p>
&lt;ul>
&lt;li>另外，这链接里也有怎么用命令行来创建的方法。下文主要讲 vscode 插件。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="vscode-插件">Vscode 插件
&lt;/h1>&lt;p>参考这个：&lt;a class="link" href="https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-vs-code-python?toc=/azure/developer/python/toc.json&amp;amp;bc=/azure/developer/python/breadcrumb/toc.json" target="_blank" rel="noopener"
>Create a Python function using Visual Studio Code - Azure Functions | Microsoft Learn&lt;/a>&lt;/p>
&lt;h2 id="简介">简介
&lt;/h2>&lt;p>在 vscode 中安装插件：Azure Functions&lt;br>
![[assets/local_image_plus/8cdedb2e6bb67b05e610da0a4c60e20b_MD5.webp]]&lt;br>
切到这个插件去点击添加一个函数，一步步往下都有说明，比较简单。&lt;br>
![[assets/local_image_plus/78e6207996628e1aed76f56df1ee621f_MD5.webp]]&lt;br>
我选了 HTTP 触发器的模板，最后给我生成了这个文件：&lt;br>
![[assets/local_image_plus/b6a76f35a9de1900f390d487806eaa39_MD5.webp]]&lt;/p>
&lt;h2 id="调试运行">调试运行
&lt;/h2>&lt;p>简单的运行，可以用插件面板上，下半部分中的 Project 展开，里面有个调试相关的操作（它可点击）。&lt;br>
![[assets/local_image_plus/eddc815273f403d50ecf49a1670d720b_MD5.webp]]&lt;br>
它会先做一些安装，然后启动 function，IDE 进入 debug 模式。这时主要运行的命令是：&lt;code>func host start&lt;/code>，直接在命令行里运行这个命令也可以启动本地调试运行。但如果你想查询代码中打的日志，一定要记得加上 &amp;ndash;verbose 的参数，所以正确的使用姿势是：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>func host start --verbose
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本地调试时，其实已经默认把 AZURE_FUNCTIONS_ENVIRONMENT 这个变量设置为 &lt;code>Development&lt;/code> 了，如果你修改代码，它会触发服务的重启，非常方便。&lt;br>
它同时生成一个链接可以直接点击，它会触发函数执行：&lt;br>
![[assets/local_image_plus/9182da3f27da7d4a3f50fea5e0f27a8d_MD5.webp]]&lt;/p>
&lt;h1 id="创建">创建
&lt;/h1>&lt;p>用 IDE 插件进行 function 创建上面已经介绍过来了，比较简单，不过读者可能会遇到网络问题而没法往下尝试。这里再介绍下 CLI 的方式来创建。&lt;/p>
&lt;h1 id="部署">部署
&lt;/h1>&lt;h2 id="平台创建应用">平台创建应用
&lt;/h2>&lt;p>先打开 &lt;a class="link" href="https://portal.azure.com/#browse/Microsoft.Web%2Fsites/kind/functionapp" target="_blank" rel="noopener"
>Microsoft Azure&lt;/a> 这个 portal 地址，创建一个 &lt;code>Function App&lt;/code> （或者中文叫“函数应用”）。&lt;br>
![[assets/local_image_plus/6fabf8ca9d4ae58107090dd5c2a8d1a2_MD5.webp]]&lt;/p>
&lt;h2 id="plugin">Plugin
&lt;/h2>&lt;p>正式部署前，肯定是需要先登录的。正常是可以在插件上操作，如下：&lt;br>
![[assets/local_image_plus/7ff7e182a5d53d450cc39c52595445c0_MD5.webp]]&lt;br>
如果不成功，可以用下文 CLI 的方法来登录。&lt;br>
选择 Deploy to Function App，直接进行部署。&lt;br>
![[assets/local_image_plus/ba3ad1afc753bbc8c9e02c351f9767e9_MD5.webp]]&lt;br>
我在使用的时候，经常遇到网络问题，因为某些你懂的原因，所以挺难的，得给 vscode 设置 Proxy (具体就不介绍了)&lt;br>
![[assets/local_image_plus/33269f2c13189e51976b07382c19e734_MD5.webp]]&lt;/p>
&lt;h2 id="cli-发布">CLI 发布
&lt;/h2>&lt;h3 id="登录">登录
&lt;/h3>&lt;p>使用前也一样需要先登录 (上面的说明都是在本地开发)：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>az login
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行时，它会打开一个网页进行登录授权&lt;br>
![[assets/local_image_plus/e5f602b033bb62e16bf9c7cc6cbe9cd7_MD5.webp]]&lt;br>
命令行也会有一堆打印，有如下关键信息就说明已经登录成功了。&lt;br>
![[assets/local_image_plus/013f33d6693e44de195ccd94cc62c07e_MD5.webp]]&lt;/p>
&lt;h3 id="发布操作">发布操作
&lt;/h3>&lt;p>当然我们也可以选择用 CLI 来做发布：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>func azure functionapp publish &amp;lt;project_name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>具体细节可以参考这里：&lt;a class="link" href="https://learn.microsoft.com/en-us/azure/azure-functions/create-first-function-cli-python?toc=/azure/developer/python/toc.json&amp;amp;bc=/azure/developer/python/breadcrumb/toc.json&amp;amp;tabs=macos,bash,azure-cli,browser" target="_blank" rel="noopener"
>Create a Python function from the command line - Azure Functions | Microsoft Learn&lt;/a>&lt;br>
这里的 &lt;code>project_name&lt;/code> 跟在平台上创建的应用名要保持一致，要不然会找不到这个 App 而发布失败。&lt;br>
![[assets/local_image_plus/4792659dccb7ab747f7907249e279eba_MD5.webp]]&lt;br>
另外还有一点要注意的是，本地的 python 环境需要跟平台上的一致，避免本地跑的好好的、部署上去就缺一些模块：&lt;br>
![[assets/local_image_plus/58d8095183c20d6e29846f68737c8d63_MD5.webp]]&lt;br>
部署完会生成一个地址可供访问：&lt;br>
![[assets/local_image_plus/2669a1bcbd69a2ffdbaf1e92f77051f1_MD5.webp]]&lt;br>
部署的过程是会比较慢，我们从平台的部署日志中可以看到它部署完后，会等待 1 分钟：&lt;br>
![[assets/local_image_plus/c700b91e850989365c8df1b4d5fa34cf_MD5.webp]]&lt;br>
在线上运行后，可以访问试试。&lt;br>
线上日志可以在这里看到：&lt;br>
![[assets/local_image_plus/a08b99e55e204453f165ae1607e6167c_MD5.webp]]&lt;br>
不过经常连接不稳定，所以其实可以到另一个一方看&lt;br>
&lt;img src="https://www.jsongo.top/49412af97e5b5cc967dac50b8c5b558f.webp"
loading="lazy"
>&lt;/p>
&lt;h1 id="其它三方插件-azurite">其它：三方插件 Azurite
&lt;/h1>&lt;p>安装另一个三方的 server 运行插件 Azurite&lt;br>
![[assets/local_image_plus/a39cf05129a3917217ba175834296f44_MD5.webp]]&lt;br>
修改下 &lt;code>local.settings.json&lt;/code> 的配置，把 &lt;code>AzureWebJobsStorage&lt;/code> 设置成 &lt;code>&amp;quot;UseDevelopmentStorage=true&amp;quot;&lt;/code>。&lt;br>
![[assets/local_image_plus/7c6eddd329734b84177874e90bca9c78_MD5.webp]]&lt;br>
打开命令面板，运行 Azurite start 来启动服务&lt;br>
![[assets/local_image_plus/6a201416d6d6a1995b944c2992bff179_MD5.webp]]&lt;br>
这时它们的启动非常快，一闪而过，没关系，它已经在跑了。&lt;br>
比较烦的时，运行时，会在当前目录下生成一些文件：&lt;br>
![[assets/local_image_plus/76ef44642b7d50dd1e37f045cef2ec7e_MD5.webp]]&lt;/p>
&lt;ul>
&lt;li>&lt;em>blobstorage&lt;/em> 和 &lt;em>queuestorage&lt;/em>
&lt;ul>
&lt;li>&lt;strong>作用&lt;/strong>：
&lt;ul>
&lt;li>这些文件夹通常用于存储本地开发时的 Azure Blob 存储和 Azure Queue 存储的模拟数据。当你在本地运行和测试 Azure Functions 时，这些文件夹可以帮助模拟真实的 Azure 存储环境。&lt;/li>
&lt;li>例如，如果你有一个 Azure Function，它从 Blob 存储中读取数据或者向 Queue 存储中写入数据，在本地开发环境中，这些文件夹会存储相关的数据，以便函数能够正常运行和测试。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>使用场景&lt;/strong>：
&lt;ul>
&lt;li>在没有连接到真实 Azure 存储账户的情况下，本地开发和调试函数时需要用到。如果删除这些文件夹，可能会导致本地运行的函数在涉及到 Blob 或 Queue 操作时出现错误，因为它们找不到模拟的存储数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>以 &lt;em>azurite_db&lt;/em> 开头的.json 文件
&lt;ul>
&lt;li>&lt;strong>作用&lt;/strong>：
&lt;ul>
&lt;li>这些文件是 Azurite 数据库文件。Azurite 是一个本地的 Azure 存储模拟器，用于在本地模拟 Azure Blob、Queue 和 Table 存储服务。这些.json 文件存储了 Azurite 模拟存储服务的数据结构和数据内容。&lt;/li>
&lt;li>例如，&lt;em>azurite_db_blob&lt;/em>.json 文件用于存储模拟的 Blob 存储数据结构和数据，&lt;em>azurite_db_queue&lt;/em>.json 文件用于存储模拟的 Queue 存储数据等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>