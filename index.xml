<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ethan 的思考札记</title><link>https://www.jsongo.top/</link><description>Recent content on Ethan 的思考札记</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Wed, 23 Oct 2024 01:43:03 +0800</lastBuildDate><atom:link href="https://www.jsongo.top/index.xml" rel="self" type="application/rss+xml"/><item><title>收藏：89岁的老程序员不讲武德</title><link>https://www.jsongo.top/%E6%94%B6%E8%97%8F89%E5%B2%81%E7%9A%84%E8%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E8%AE%B2%E6%AD%A6%E5%BE%B7/</link><pubDate>Tue, 22 Oct 2024 21:27:58 +0000</pubDate><guid>https://www.jsongo.top/%E6%94%B6%E8%97%8F89%E5%B2%81%E7%9A%84%E8%80%81%E7%A8%8B%E5%BA%8F%E5%91%98%E4%B8%8D%E8%AE%B2%E6%AD%A6%E5%BE%B7/</guid><description>&lt;p>职业生涯的一些心得，不一定对，大家辨证的看吧 只有结论，没有推论，如果有感兴趣的 topic 可以在评论区留言，我给你讲故事&lt;/p>
&lt;h1 id="忠告">忠告&lt;/h1>
&lt;ul>
&lt;li>给即将踏入职场的同学一句忠告: &amp;quot; 不要听信那些职场老油条的忠告 &amp;quot;&lt;/li>
&lt;/ul>
&lt;h1 id="竞争">竞争&lt;/h1>
&lt;ul>
&lt;li>刚毕业的时候总是有同学去比较 offer，谁比谁多 2000。&lt;/li>
&lt;li>进入公司后，也随时警惕，谁比谁先晋升，谁比谁绩效好。&lt;/li>
&lt;li>其实对于新同学来说，不要过于在意一城一池的得失。&lt;/li>
&lt;li>因为，后面，你就习惯了。&lt;/li>
&lt;li>如果时间再拉长到 20 年，有的跑闪送，有的开滴滴，真不见得谁高谁低。&lt;/li>
&lt;/ul>
&lt;h1 id="成长">成长&lt;/h1>
&lt;ul>
&lt;li>工作以后，相比于在学校，大部分人是懒惰的&lt;/li>
&lt;li>很多工作很多年的大厂程序员&lt;/li>
&lt;li>他们往往开发效率极高，代码写得非常漂亮&lt;/li>
&lt;li>但长期的重复劳动和机械式的需求翻译，已经让他们变成了熟练工种，难逃 35 岁的厄运&lt;/li>
&lt;li>因此脱颖而出很简单，你只需要在下班时间，放下工作，坚持学习和思考&lt;/li>
&lt;li>但即使这么简单，绝大多数的人是坚持不下来的&lt;/li>
&lt;/ul>
&lt;h1 id="交接">交接&lt;/h1>
&lt;ul>
&lt;li>无论你的代码写得多么精妙，写得多么 Clean，多么巧夺天工，你都要知道&lt;/li>
&lt;li>在接手你代码的人眼中，都是屎&lt;/li>
&lt;/ul>
&lt;h1 id="屎山">屎山&lt;/h1>
&lt;ul>
&lt;li>大公司的屎山都是聪明的屁股拉出来的&lt;/li>
&lt;li>如果没有充足的把握，不要轻易去重构，最终引发屎崩&lt;/li>
&lt;li>少数人，经过旷日持久的坚持，终于设计出了一个全新的系统&lt;/li>
&lt;li>后来这个系统被人称为屎山 2.0&lt;/li>
&lt;li>最终两坨屎以一种奇怪的角度连接在一起，long live&lt;/li>
&lt;/ul>
&lt;h1 id="绩效">绩效&lt;/h1>
&lt;ul>
&lt;li>绩效、晋升&amp;hellip;这些所有激励本质上都是管理工具&lt;/li>
&lt;li>管理工具，既然是工具，是为老板服务的&lt;/li>
&lt;li>想明白这一点其实很多事情你会很好判断&lt;/li>
&lt;li>没有多劳多得，没有按劳分配&lt;/li>
&lt;li>就和菜市场买菜是一样的，你预计这个菜买回来会很好吃，你就愿意多掏钱&lt;/li>
&lt;li>时刻保持自己的不可替代性，保持自己的价值，让你的离职成为团队的最大损失&lt;/li>
&lt;li>注意，scope 不是不可替代的，是老板赋予的&lt;/li>
&lt;li>能力才是不可替代的，解决问题的能力&lt;/li>
&lt;li>而能力是需要事情来体现的&lt;/li>
&lt;li>现在你知道应该怎么做了&lt;/li>
&lt;li>去做有价值的事情，通过事情证明能力，降低事务性工作投入..&lt;/li>
&lt;/ul>
&lt;h1 id="复盘">复盘&lt;/h1>
&lt;ul>
&lt;li>做过的事情，没有复盘和总结，只能叫做经历&lt;/li>
&lt;li>经过了复盘和总结，能够在后续同样的场景中帮助结论快速建立，这才叫经验&lt;/li>
&lt;li>经验的传递往往是三段式： 条件 结论 原因&lt;/li>
&lt;/ul>
&lt;h1 id="表象">表象&lt;/h1>
&lt;ul>
&lt;li>很多问题暴露出来的只是表象，如果可以，应该去解决更深层次的原因&lt;/li>
&lt;li>例如：很多公司喜欢用 5Why 分析法来分析事故根因&lt;/li>
&lt;li>例如：很多领导喜欢推崇第一性原理来发现机会&lt;/li>
&lt;/ul>
&lt;h1 id="卷">卷&lt;/h1>
&lt;ul>
&lt;li>对于大多数管理者只有两个选择：向上走、向外走&lt;/li>
&lt;li>下面的同学要成长，Scope 不变：被取代&lt;/li>
&lt;li>下面的同学要成长，Scope 扩大：去卷&lt;/li>
&lt;li>铁打的营盘，流水的兵，不存在的，业务复杂度一年比一年高，流水的兵哪能流得动&amp;hellip;&lt;/li>
&lt;/ul>
&lt;h1 id="船沉">船沉&lt;/h1>
&lt;ul>
&lt;li>对于大多数领导而言，其实最怕的是船沉了&lt;/li>
&lt;li>他们躺在自己数年建起来的大船上，依靠平台持续创造价值&lt;/li>
&lt;li>资源是锦上添花的，但绝对不会雪中送炭&lt;/li>
&lt;li>时刻警惕，保持持续学习和解决问题的能力，而不是依赖资源&lt;/li>
&lt;/ul>
&lt;h1 id="背锅">背锅&lt;/h1>
&lt;ul>
&lt;li>被甩锅了不要慌，有些锅背了就背了，本质是一种交换&lt;/li>
&lt;li>但如果让你背锅，还不给你糖，这时候就要抗争了&lt;/li>
&lt;li>不要急着反驳，先把水搅浑：责任不明确，需要复盘&lt;/li>
&lt;li>把所有人拉进群，反复验尸&amp;hellip;这种会谁不来谁吃亏，相关方都会来的&lt;/li>
&lt;li>几场会下来，谁和谁抱团，谁是谁亲儿子&amp;hellip;人物关系图谱清清楚楚&lt;/li>
&lt;li>真理越辩越明，到最后事情是什么样的清清楚楚，谁闯祸大家一眼清&lt;/li>
&lt;li>这时候，责任人是谁已经不重要了&lt;/li>
&lt;/ul>
&lt;h1 id="架构迭代">架构迭代&lt;/h1>
&lt;ul>
&lt;li>程序员总是在解决重复劳动，把手工的变成自动的&lt;/li>
&lt;li>在业务初期，所有事情都是创造性的，没有范式&lt;/li>
&lt;li>当业务稳定后，创造性的工作自然就趋向于一致&lt;/li>
&lt;li>这时候谁必然面临为这些一致性的工作设计一套架子，让这些变更不需要走开发流程&lt;/li>
&lt;li>可是一旦这个架子上线，以前那些需求的实现对于研发而言，就再无价值&lt;/li>
&lt;li>但是就如同 蒸汽机 无法阻挡 内燃机 统一世界&lt;/li>
&lt;li>去做 内燃 机吧&lt;/li>
&lt;/ul>
&lt;h1 id="关于公平">关于公平&lt;/h1>
&lt;ul>
&lt;li>效率和公平往往是对立的&lt;/li>
&lt;li>商业公司追求的永远是效率&lt;/li>
&lt;li>即使你看到了公平的光芒，那也是与长期效率的 tradeoff&lt;/li>
&lt;li>不要抱怨不公，没有意义，永远围绕你的长期目标做选择题&lt;/li>
&lt;/ul>
&lt;h1 id="管理">管理&lt;/h1>
&lt;ul>
&lt;li>管理往往是冰冷的，是没有温度的&lt;/li>
&lt;li>即使你认为有，那只是被 HR 狠狠的包装起来了而已&lt;/li>
&lt;/ul>
&lt;h1 id="带团队">带团队&lt;/h1>
&lt;ul>
&lt;li>时刻谨记：不要违背人性! 不要违背人性! 不要违背人性!&lt;/li>
&lt;li>换位思考，己所不欲勿施于人&lt;/li>
&lt;li>不仅限于对内，也包括对外的合作&lt;/li>
&lt;li>共赢背景下的合作，才是稳定的&lt;/li>
&lt;/ul>
&lt;h1 id="信心">信心&lt;/h1>
&lt;ul>
&lt;li>我们做过的很多项目，看起来收获的是经验&lt;/li>
&lt;li>每当 面试 或者 分享 的时候，总是夸夸其谈，好像有银弹&lt;/li>
&lt;li>但往往到了执行的时候，亲自去做的时候，才发现完全不同&lt;/li>
&lt;li>其实没有什么银弹，细节是魔鬼&lt;/li>
&lt;li>业务的一点点差别到最后系统上可能是天壤之别&lt;/li>
&lt;li>同样的业务，不同的演进思路，最后系统上、架构上，可能差之千里&lt;/li>
&lt;li>说到底我们收获的到底是什么呢，可能是把一件事情能做到多好的信心吧&lt;/li>
&lt;li>出处：&lt;a href="https://link.juejin.cn/?target=http://blog.farmostwood.net/854.html">blog.farmostwood.net/854.html&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="视角">视角&lt;/h1>
&lt;ul>
&lt;li>对于一线员工: 活是干不完的&lt;/li>
&lt;li>对于中层领导: (核心业务/领导关系/人心) 至少抓两个&lt;/li>
&lt;li>对于高层领导: 不要试图去让所有人理解，因为在大部分人眼里你都是**&lt;/li>
&lt;/ul>
&lt;h1 id="三道坎">三道坎&lt;/h1>
&lt;p>职业生涯三道不容易迈过去的坎&lt;/p></description></item><item><title/><link>https://www.jsongo.top/w43-of-2024%E6%88%90%E6%9C%AC%E6%80%9D%E7%BB%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.jsongo.top/w43-of-2024%E6%88%90%E6%9C%AC%E6%80%9D%E7%BB%B4/</guid><description>&lt;h1 id="成本思维">成本思维&lt;/h1>
&lt;p>大多数看起来有所利益的事情，肯定有成本，而且有风险。风险本质上也是一种成本。&lt;br>
用成本 + 风险的思维来看问题，不要只想着好处。成本和风险往往是在巨大的利益面前，特别容易被忽视的东西。&lt;br>
塔勒布在《非对称风险》中表达了一个观点，他反复提到在真实的世界里，一定要风险共担，如果有人不愿意承担风险，却要享受好处，这样的人是有问题的。&lt;/p>
&lt;h2 id="企业最大的成本是老大的决策成本">企业最大的成本，是老大的决策成本&lt;/h2>
&lt;p>如果动不动就来个调整，发现不对，马上再折腾几回，这损耗的是非常大的。决策成功率越低，企业就会被越来越快消磨掉。我们说大公司病，其实有一层逻辑是：公司小的时候，10 个决策中，有一两个正确的决策可能就能把营收和规模做上来；但当公司越来越大的时候，10 个决策中如果有一两个决策做错了，那都是在损耗。所以大公司病往往不是因为决策人变笨了，而是企业到了那个阶段，决策的成本变高了。&lt;br>
看过一篇文章《&lt;a href="https://news.qq.com/rain/a/20241015A04JNI00">只有10%的产品值得用AI再做一遍&lt;/a>》，标题就直接表明了作者的观点。文中提到了 AI 时代，各大厂争先恐后地攻城略地，但后来发现，做了很多产品功能都是徒劳，浪费了很多资源。比如：&lt;/p>
&lt;ul>
&lt;li>支小宝虽有创意但操作路径复杂且多数功能未发挥 AI 能力；&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>如果我用支小宝坐公交，我需要把 APP 打开，点开对话，再输入指令“我要坐公交”，等待 2-3s 加载出来，这个过程至少需要 5s 以上。&lt;br>
实际上，用手机的 NFC 直接刷码上车，不需要打开任何 App 就完成了这个操作。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>淘宝问问、京东京言等电商 AI 助手功能空泛、多轮对话理解能力差且 AI 划重点功能无实际价值；&lt;/li>
&lt;li>饿了么的 AI 评价总结功能上线又下线，因为既无价值还浪费费用；&lt;/li>
&lt;li>携程问道生成的内容干巴巴且缺乏实用性。&lt;br>
这些都表明很多产品为跟上 AI 潮流而做 AI，未解决用户痛点，在未成熟阶段盲目投入，造成大师的资源浪费。&lt;br>
当然也不能说探索就是浪费，只是想表达决策是需要成本的，而且经常是最大的企业成本。&lt;/li>
&lt;/ul>
&lt;h2 id="制度本身也要成本">制度本身也要成本&lt;/h2>
&lt;p>坏的制度增加企业&lt;strong>成本&lt;/strong>，而好的制度是降低企业&lt;strong>成本&lt;/strong>的。&lt;br>
制度虽然有时让人诟病，但它们能带来一些确定性。一个集体如果制度有问题，一方面在遇到事时，经常会有模棱两可的疑惑，直到有个人做了表率，其它人慢慢地也跟上了。到后来，大家苦于不合理制度的约束，他们可能会不断地试探，直到看到不好的信号或良心觉得不妥，从而确定了一个心里底线，形成了自己的“制度”。&lt;br>
刘润讲到一个案例：一家文化教育的企业，老板从来不管教学质量，这家公司里的老师能偷懒就偷懒，因为没有制度去管理他们，慢慢的好老师就都走了，留下的越来越烂，这是会传染的。&lt;br>
问题制度带来的成本，就是人才流失，导致最后没有优秀的人来高效的做事，成本急剧增加。&lt;/p>
&lt;blockquote>
&lt;p>题外话，刘润在书中提到，对公司的管理的三种手段：&lt;/p>
&lt;ul>
&lt;li>鼓励白，即激励一些对的事；&lt;/li>
&lt;li>压缩灰，即用文化作为共同的价值观，给大家一个底层的判断标准，从而遇到模棱两可的事时能有一个基础的良知判断；&lt;/li>
&lt;li>禁止黑，即什么事一定不能做，这是一个更强硬的制度，防止公司烂掉。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="团队的规模也有成本">团队的规模也有成本&lt;/h2>
&lt;p>我在 &lt;a href="https://bytedance.larkoffice.com/wiki/FffIwQz9UibW25k7T7mcJmxOnYg">Thinking - W31 of 2024 - 为何协作沟通难&lt;/a> 里提到了亚马逊的 &lt;code>Two Pizza team&lt;/code> 原则：&lt;/p>
&lt;blockquote>
&lt;p>[!Info] Two Pizza team&lt;br>
把整个系统拆分成微服务或独立模块，不同的 team 各负责一个单位的事情。Two Pizza team 是指用两块 pizza 就能吃饱的团队规模，一个业务的团队超过了这个规模，信息传递的成本就很高，沟通协作就变得困难。&lt;/p></description></item></channel></rss>